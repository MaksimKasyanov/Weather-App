/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/app.js":
/*!***********************!*\
  !*** ./src/js/app.js ***!
  \***********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\nconst link = \"http://api.weatherapi.com/v1/current.json?key=502fb921be824b3b948101537221909\";\r\nconst root = document.querySelector('.root');\r\n\r\n\r\n\r\n\r\n\r\n\r\nlet store = {\r\n\tcity: \"Viena\",\r\n\tcountry: \"Ukraine\",\r\n\tlocaltime: \"00:00 AM\",\r\n\tweather: \"\",\r\n\tupdated: \"00:00 AM\",\r\n\ttemperature: 0,\r\n\tfeelsLike: 0,\r\n\twindSpeed: 0,\r\n\twindDir: 0,\r\n\tpressure: 0,\r\n\thumidity: 0,\r\n\tcloud: 0,\r\n}\r\n\r\n\r\nconst fetchData = async () => {\r\n\tconst result = await fetch(`${link}&q=${store.city}`);\r\n\tconst data = await result.json()\r\n\r\n\tconst {\r\n\t\tlocation: {\r\n\t\t\tname: city,\r\n\t\t\tcountry,\r\n\t\t\tlocaltime: localtime,\r\n\t\t},\r\n\t\tcurrent: { \r\n\t\t\tcondition: {text: weather},\r\n\t\t\tlast_updated: updated,\r\n\t\t\ttemp_c: temperature,\r\n\t\t\tfeelslike_c: feelsLike,\r\n\t\t\twind_mph: windSpeed,\r\n\t\t\twind_dir: windDir,\r\n\t\t\tpressure_mb: pressure,\r\n\t\t\thumidity,\r\n\t\t\tcloud,\r\n\t\t},\r\n\r\n\t} = data;\r\n\r\n\tstore = {\r\n\t\t...store,\r\n\t\tcity,\r\n\t\tcountry,\r\n\t\tlocaltime,\r\n\t\tweather,\r\n\t\tupdated,\r\n\t\ttemperature,\r\n\t\tfeelsLike,\r\n\t\twindSpeed,\r\n\t\twindDir,\r\n\t\tpressure,\r\n\t\thumidity,\r\n\t\tcloud\r\n\t}\r\n\r\n\r\n\t\r\n\t// console.log(data);\r\n\tconsole.log(store);\r\n\t\r\n\trenderComponent()\r\n}\r\n\r\n\r\nconst markup = () => {\r\n\tconst { city, weather, temperature, updated, localtime } = store;\r\n\tconst temp = `${Math.round(temperature)}°`;\r\n\r\n\r\n\treturn `\t\t<div class=\"weather\">\r\n\t<div class=\"weather__header\">\r\n\t\t<div class=\"weather__header-subtitle\">Weather Today in</div>\r\n\t\t<div class=\"weather__header-title\"><span>${city}</span></div>\r\n\t</div>\r\n\t<div class=\"weather__info\">\r\n\t\t<div class=\"weather__info-left\">\r\n\t\t\t<img class=\"weather__info-icon\" src=\"img/${getImage(weather)}\" alt=\"weather\">\r\n\t\t\t<div class=\"weather__info-description\">${weather}</div>\r\n\t\t</div>\r\n\t\t<div class=\"weather__info-right\">\r\n\t\t\t<div class=\"weather__info-subtitle\">as of ${updated}</div>\r\n\t\t\t<div class=\"weather__info-temperature\">${temp}</div>\r\n\t\t</div>\r\n\t</div>\r\n</div>`\r\n}\r\nconst renderComponent = () => {\r\n\troot.innerHTML = markup();\r\n}\r\nconst getImage = (weather) => {\r\n\tconst value = weather.toLowerCase();\r\n\tswitch(value){\r\n\t\tcase \"sunny\": return \"sunny.svg\"\r\n\t}\r\n\treturn \"rainy.svg\"\r\n}\r\nfetchData()\r\n\r\n\r\n// !let currentTime = new Date(); \r\n// !currentTime.toLocaleString('en-GB', { hour:'numeric', minute:'numeric', second:'numeric', hour12:false });\r\n\r\n\r\n// const markup = () => {\r\n// \t// const { city } = store;\r\n// \treturn `\t\t<div class=\"weather\">\r\n// \t<div class=\"weather__header\">\r\n// \t\t<div class=\"weather__header-subtitle\">Weather Today in</div>\r\n// \t\t<div class=\"weather__header-title\"><span>{city}</span></div>\r\n// \t</div>\r\n// \t<div class=\"weather__info\">\r\n// \t\t<div class=\"weather__info-left\">\r\n// \t\t\t<img class=\"weather__info-icon\" src=\"img/{getImage(description)}\" alt=\"weather\">\r\n// \t\t\t<div class=\"weather__info-description\">{description}</div>\r\n// \t\t</div>\r\n// \t\t<div class=\"weather__info-right\">\r\n// \t\t\t<div class=\"weather__info-subtitle\">as of {observationTime}</div>\r\n// \t\t\t<div class=\"weather__info-temperature\">{temperature}°</div>\r\n// \t\t</div>\r\n// \t</div>\r\n// </div>`\r\n// }\r\n// const renderComponent = () => {\r\n// \troot.innerHTML = markup();\r\n// }\r\n\r\n\r\n// renderComponent()\r\n\r\n// !///////////////////////////////////////////////////////////////////////\r\n// const fetchData = async () => {\r\n// \tconst result = await fetch(`${link}&query=${store.city}`);\r\n// \tconst data = await result.json()\r\n\r\n// \tconsole.log(data)\r\n// \tconst { \r\n// \t\tcurrent: { \r\n// \t\t\tfeelslike, \r\n// \t\t\tcloudcover, \r\n// \t\t\ttemperature, \r\n// \t\t\tobservation_time: observationTime, \r\n// \t\t\tpressure, \r\n// \t\t\tuv_index: uvIndex, \r\n// \t\t\tvisibility, \r\n// \t\t\tis_day: isDay,\r\n// \t\t\tweather_descriptions: description,\r\n// \t\t\twind_speed: windSpeed,\r\n// \t\t},\r\n// \t\tlocation: { name },\r\n// \t} = data;\r\n// \tstore = {\r\n// \t\t...store,\r\n// \t\tfeelslike,\r\n// \t\tcloudcover,\r\n// \t\ttemperature,\r\n// \t\t// humidity,\r\n// \t\tobservationTime,\r\n// \t\tpressure,\r\n// \t\tuvIndex,\r\n// \t\tvisibility,\r\n// \t\tdescription: description[0],\r\n// \t\twindSpeed,\r\n// \t}\r\n// \tconsole.log(description)\r\n// \trenderComponent()\r\n// }\r\n\r\n// const getImage = (description) => {\r\n// \tconst value = description.toLowerCase();\r\n// \tswitch(value){\r\n// \t\t// case \"cloudy\": return \"cloudy.svg\"\r\n// \t}\r\n// \treturn \"rainy-3.svg\"\r\n// }\r\n\r\n// const markup = () => {\r\n// \tconst { city, description, observationTime, temperature } = store;\r\n// \treturn `\t\t<div class=\"weather\">\r\n// \t<div class=\"weather__header\">\r\n// \t\t<div class=\"weather__header-subtitle\">Weather Today in</div>\r\n// \t\t<div class=\"weather__header-title\"><span>${city}</span></div>\r\n// \t</div>\r\n// \t<div class=\"weather__info\">\r\n// \t\t<div class=\"weather__info-left\">\r\n// \t\t\t<img class=\"weather__info-icon\" src=\"img/${getImage(description)}\" alt=\"weather\">\r\n// \t\t\t<div class=\"weather__info-description\">${description}</div>\r\n// \t\t</div>\r\n// \t\t<div class=\"weather__info-right\">\r\n// \t\t\t<div class=\"weather__info-subtitle\">as of ${observationTime}</div>\r\n// \t\t\t<div class=\"weather__info-temperature\">${temperature}°</div>\r\n// \t\t</div>\r\n// \t</div>\r\n// </div>`\r\n// }\r\n// const renderComponent = () => {\r\n// \troot.innerHTML = markup();\r\n// }\r\n\r\n// fetchData();\r\n\r\n\n\n//# sourceURL=webpack://gulp-2022/./src/js/app.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/js/app.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;