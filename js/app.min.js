/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/app.js":
/*!***********************!*\
  !*** ./src/js/app.js ***!
  \***********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\nconst link = \"https://api.weatherapi.com/v1/current.json?key=502fb921be824b3b948101537221909\";\r\n// const userLocation = \"http://ip-api.com/json/\"\r\nconst root = document.querySelector('.root');\r\n\r\nconst popupCross = document.querySelector('.popup__close');\r\nconst popup = document.querySelector('.popup');\r\nconst textInput = document.querySelector('.form__input');\r\nconst form = document.querySelector('.form');\r\n\r\n\r\n// let userCity = '';\r\n// const fetchCity = async () => {\r\n// \tconst user = await fetch(`${userLocation}`);\r\n// \tconst userData = await user.json();\r\n\t\r\n// \tconst {\r\n// \t\tregionName: city,\r\n// \t} = userData;\r\n// \tuserCity = userData.city;\r\n// }\r\n// console.log(userCity)\r\n\r\nlet store = {\r\n\tcity: `Kharkiv`,\r\n\tcountry: \"Ukraine\",\r\n\tlocaltime: \"00:00 AM\",\r\n\tisDay: 2,\r\n\tweather: \"\",\r\n\twindDeg: 0,\r\n\tproperties: {\r\n\t\ttemperature: 0,\r\n\t\tfeelslike: 0,\r\n\t\twindSpeed: 0,\r\n\t\tpressure: 0,\r\n\t\thumidity: 0,\r\n\t\tcloud: 0,\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst fetchData = async () => {\r\n\ttry{\r\n\t\tconst result = await fetch(`${link}&q=${store.city}`);\r\n\t\tconst data = await result.json();\r\n\r\n\r\n\t\tconst {\r\n\t\t\tlocation: {\r\n\t\t\t\tname: city,\r\n\t\t\t\tcountry,\r\n\t\t\t\tlocaltime: localtime,\r\n\t\t\t},\r\n\t\t\tcurrent: { \r\n\t\t\t\tcondition: {\r\n\t\t\t\t\ttext: weather,\r\n\t\t\t\t\ticon: icon\r\n\t\t\t\t},\r\n\t\t\t\ttemp_c: temperature,\r\n\t\t\t\tis_day: isDay,\r\n\t\t\t\tfeelslike_c: feelslike,\r\n\t\t\t\twind_mph: windSpeed,\r\n\t\t\t\twind_dir: windDir,\r\n\t\t\t\twind_degree: windDeg,\r\n\t\t\t\tpressure_mb: pressure,\r\n\t\t\t\thumidity,\r\n\t\t\t\tcloud,\r\n\t\t\t},\r\n\t\t} = data;\r\n\r\n\t\tstore = {\r\n\t\t\t...store,\r\n\t\t\tcity,\r\n\t\t\tcountry,\r\n\t\t\tisDay,\r\n\t\t\tlocaltime,\r\n\t\t\tweather,\r\n\t\t\ticon,\r\n\t\t\tmainData: {\r\n\t\t\t\ttemperature: `${temperature}°`,\r\n\t\t\t\tfeelslike: `${feelslike}°`,\r\n\t\t\t\t\r\n\t\t\t},\r\n\t\t\tproperties: {\r\n\t\t\t\twindSpeed: {\r\n\t\t\t\t\ttitle: 'Wind speed',\r\n\t\t\t\t\tvalue: `${windSpeed}kph`,\r\n\t\t\t\t\ticon: 'windSpeed.svg',\r\n\t\t\t\t},\r\n\t\t\t\thumidity: {\r\n\t\t\t\t\ttitle: 'Humidity',\r\n\t\t\t\t\tvalue: `${humidity}%`,\r\n\t\t\t\t\ticon: 'humidity.svg',\r\n\t\t\t\t},\r\n\t\t\t\tcloud: {\r\n\t\t\t\t\ttitle: 'Clouds cover',\r\n\t\t\t\t\tvalue: `${cloud}%`,\r\n\t\t\t\t\ticon: 'cloud.svg',\r\n\t\t\t\t},\r\n\t\t\t\tpressure: {\r\n\t\t\t\t\ttitle: 'Pressure',\r\n\t\t\t\t\tvalue: `${pressure}mbar`,\r\n\t\t\t\t\ticon: 'pressure.svg',\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\twindDeg,\r\n\t\t\twindDir,\r\n\t\t}\r\n\r\n\t\trenderComponent();\r\n\t\tarrowDirection();\r\n\t}catch(err){\r\n\r\n\t}\r\n}\r\n\r\n\r\nconst renderProperties = (properties) => {\r\n\treturn Object.values(properties).map(({ title, value, icon }) => {\r\n\t\treturn `<div class=\"property\">\r\n\t\t\t\t\t\t<div class=\"property__icon\">\r\n\t\t\t\t\t\t\t<img class=\"property__img\" src=\"img/icons/${icon}\" alt=\"img\">\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"property__info\">\r\n\t\t\t\t\t\t\t<p class=\"property__info-value\">${value}</p>\r\n\t\t\t\t\t\t\t<p class=\"property__info-description\">${title}</p>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>`\r\n\t}).join('');\r\n\r\n}\r\n\r\nconst markup = () => {\r\n\r\n\tconst { \r\n\t\tcity, \r\n\t\tcountry, \r\n\t\tweather, \r\n\t\ticon, \r\n\t\twindDir, \r\n\t\twindDeg, \r\n\t\tisDay,\r\n\t\tproperties,\r\n\t\tmainData,\r\n\t} = store;\r\n\treturn `\t\t<div class=\"weather\">\r\n\t<div class=\"weather__header\">\r\n\t\t<div class=\"weather__header-title\"><span>${city}</span></div>\r\n\t\t<div class=\"weather__header-head\">\r\n\t\t\t<div class=\"weather__header-country\">${country}&nbsp&nbsp&nbsp</div>\r\n\t\t\t<div class=\"weather__watches-time\"></div>\r\n\t\t\t</div>\r\n\t</div>\r\n\r\n\t<div class=\"main\">\r\n\t\t<p class=\"main__item main__temperature\">Temperature: <span class=\"main__span\">${mainData.temperature}</span></p>\r\n\t\t<p class=\"main__item main__feels\">Feels like: <span class=\"main__span\">${mainData.feelslike}</span></p>\r\n\t\t<p class=\"main__item main__outside\">Weather outside: <span class=\"main__span\">${weather}</span></p>\r\n\t\t<img class=\"main__img\" src=\"${getWeatherImage(weather)}\" alt=\"weather\">\r\n\t</div>\r\n\r\n\r\n\t<div class=\"weather__info\">\r\n\t\t<div class=\"weather__info-item\">\r\n\t\t\t<div class=\"property-wrapper\">${renderProperties(properties)}</div>\r\n\t\t</div>\r\n\t\t<div class=\"weather__info-item\">\r\n\t\t\t<p class=\"weather__compas-title\">Wind direction: <span class=\"weather__compas-span\">${windDir}</span></p>\r\n\t\t\t<div class=\"weather__compas\">\r\n\t\t\t\t<img class=\"weather__compas-bg\" src=\"img/compas.svg\" alt=\"temperature\">\r\n\t\t\t\t<div class=\"weather__arrow-wrapper\">\r\n\t\t\t\t\t<img class=\"weather__compas-arrow\" src=\"img/compas-arrow.svg\" alt=\"temperature\">\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t\r\n\t\t</div>\r\n\t\r\n</div>`\r\n}\r\n\r\nconst arrowDirection = () => {\r\n\tdocument.querySelector('.weather__compas-arrow').style.transform = `rotate(-500deg)`;\r\n\tsetTimeout(() => {\r\n\t\tdocument.querySelector('.weather__compas-arrow').style.transform = `rotate(${store.windDeg}deg)`\r\n\t}, 100);\r\n\t\r\n}\r\n\r\nsetInterval(() => {\r\n\tlet time = document.querySelector('.weather__watches-time');\r\n\tlet localDate = new Date(store.localtime);\r\n\tlet date = new Date();\r\n\tlet hours = localDate.getHours();\r\n\tlet minutes = date.getMinutes();\r\n\tlet seconds = date.getSeconds();\r\n\tlet dayNight = \"\";\r\n\thours > 12 ? dayNight = 'PM' : dayNight = 'AM';\r\n\thours > 12 ? hours = (hours - 12) : hours;\r\n\tminutes < 10 ? minutes = '0' + minutes : minutes;\r\n\tseconds < 10 ? seconds = '0' + seconds : seconds;\r\n\ttime.innerHTML = `${hours}:${minutes}:${seconds} ${dayNight}`\r\n}, 1000)\r\n\r\n\r\nconst getWeatherImage = (weather) => {\r\n\tconst value = weather.toLowerCase();\r\n\tconst { isDay } = store;\r\n\tif(isDay){\r\n\t\tswitch(value){\r\n\t\t\tdefault: return `${store.icon}`\r\n\r\n\t\t}\r\n\t}\r\n\tif(isDay === 0){\r\n\t\tswitch(value){\r\n\t\t\tdefault: return `${store.icon}`\r\n\t\t}\r\n\t}\r\n}\r\n\r\nconst popupActive = () => {\r\n\tpopup.classList.toggle(\"popup__active\")\r\n}\r\n\r\nconst renderComponent = () => {\r\n\troot.innerHTML = markup();\r\n\tconst city = document.querySelector('.weather__header-title');\r\n\tcity.addEventListener('click', popupActive);\r\n}\r\n\r\nconst handleInput = (e) => {\r\n\tstore = {\r\n\t\t...store,\r\n\t\tcity: e.target.value,\r\n\t}\r\n}\r\n\r\nconst handleSubmit = (e) => {\r\n\te.preventDefault();\r\n\tfetchData();\r\n\tpopupActive();\r\n}\r\n\r\npopupCross.addEventListener('click', popupActive);\r\nform.addEventListener('submit', handleSubmit);\r\ntextInput.addEventListener('input', handleInput);\r\n\r\nfetchData()\r\n\r\n\n\n//# sourceURL=webpack://gulp-2022/./src/js/app.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/js/app.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;